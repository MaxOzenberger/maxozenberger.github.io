import{a as F,as as H,at as w,au as $e,j as Pe,av as ue,aw as Ve,ax as Le,ay as de,t as A,az as je,aA as ke,aB as ne,aC as V,aD as Ke,aE as Ee,aF as He,aG as qe,aH as Ze,aI as Ne,aJ as Ye,aK as Xe,aL as Qe,z as N,aM as We,a5 as D,a6 as C,a7 as ze,f as Je,a3 as et,aN as tt,J as st,k as b,aO as it,aP as rt,W as Y,aQ as nt,aR as ge,aS as ot,aT as xe,aU as _e,aV as at,aW as lt,aX as ht,aY as ve,aZ as oe,a_ as dt,a$ as ct,b0 as ut,a8 as ft}from"./index.3255d2a5.js";import{a as be,V as pt,Z as mt,i as yt}from"./cimAnalyzer.2e975d1d.js";import{p as gt}from"./normalizeUtilsSync.95f750ca.js";import{U as xt}from"./definitions.1d569ae6.js";import{x as fe,F as J,j as ce,H as _t,Y as vt,P as te,R as bt,t as Dt,S as Ae}from"./color.18cd4954.js";import{f as Ct,E as De}from"./VertexArrayObject.ad007c8f.js";import{F as wt}from"./enums.3c1fa5b5.js";import{m as Tt,i as Bt}from"./AttributeStoreView.a805ba6a.js";import{U as Ft}from"./MaterialKey.3d16bafa.js";import{a as ee,o as St,x as Rt,n as It,i as Mt,E as Lt}from"./Matcher.19c09547.js";import{w as Ce,$ as zt}from"./schemaUtils.1fd0b466.js";import{c as At,b as Gt,r as Ot,M as Ut}from"./ComputedAttributeStorage.6996e7f3.js";import"./alignmentUtils.ba8835fe.js";import"./number.dcd3e86c.js";import{createSymbolSchema as $t}from"./createSymbolSchema.0873edf1.js";const y=-1;class we{constructor(){this._dirties=[{vertexFrom:y,vertexCount:y,indexFrom:y,indexCount:y,allDirty:!1},{vertexFrom:y,vertexCount:y,indexFrom:y,indexCount:y,allDirty:!1},{vertexFrom:y,vertexCount:y,indexFrom:y,indexCount:y,allDirty:!1},{vertexFrom:y,vertexCount:y,indexFrom:y,indexCount:y,allDirty:!1},{vertexFrom:y,vertexCount:y,indexFrom:y,indexCount:y,allDirty:!1}]}hasDirty(){return this._dirties.some(e=>e.indexCount!==y||e.allDirty)}markAllClean(){for(const e of this._dirties)e.indexFrom=y,e.indexCount=y,e.vertexFrom=y,e.vertexCount=y,e.allDirty=!1}markAllDirty(){for(const e of this._dirties)e.allDirty=!0}forEach(e){for(let t=0;t<this._dirties.length;++t){const{indexCount:s,indexFrom:i,vertexCount:r,vertexFrom:n,allDirty:a}=this._dirties[t],c={};let d,h=!1;(a||n!==y&&r>0)&&(c.geometry={count:r,from:n,allDirty:a},h=!0),(a||i!==y&&s>0)&&(d={count:s,from:i,allDirty:a},h=!0),h&&e({indices:d,vertices:c},t)}}markDirtyIndices(e,t,s){const i=this._dirties[e],r=t,n=s;if(!i.allDirty)if(i.indexCount!==y){const a=Math.min(i.indexFrom,r),c=Math.max(i.indexFrom+i.indexCount,r+n)-a;i.indexFrom=a,i.indexCount=c}else i.indexFrom=r,i.indexCount=n}markDirtyVertices(e,t,s,i){const r=this._dirties[e],n=s,a=i;if(!r.allDirty)if(r.vertexCount!==y){const c=Math.min(r.vertexFrom,n),d=Math.max(r.vertexFrom+r.vertexCount,n+a)-c;r.vertexFrom=c,r.vertexCount=d}else r.vertexFrom=n,r.vertexCount=a}}class Pt{get largestRange(){return this._largestRange}constructor(e){this._largestRange=null,this._parent=e,this._updateLargestRange()}rangeCreated(e){(!this._largestRange||e.count>this._largestRange.count)&&(this._largestRange=e)}rangeResized(e,t){e===this._largestRange?e.count<t&&this._updateLargestRange():(!this._largestRange||e.count>this._largestRange.count)&&(this._largestRange=e)}findBestRange(e){let t=this._parent._freeHead,s=null;for(;t!==null;)t.count>=e&&(!s||t.count-e<s.count-e)&&(s=t),t=t.next;return s}findAdjacentRanges(e,t){let s=!0,i=!1,r=null,n=this._parent._freeHead;for(;s&&!i;){const a=r!==null?r.from+r.count:0,c=n!==null?n.from:this._parent._size;e>=a&&e+t<=c?(s=!1,i=!0):n!==null?(r=n,n=n.next):s=!1}return[r,n]}_updateLargestRange(){let e=null,t=this._parent._freeHead;for(;t!==null;)(!e||t.count>e.count)&&(e=t),t=t.next;this._largestRange=e}}class S{constructor(e,t){this._allocated=0,this._size=e,this._freeHead=e>0?{from:0,count:e,prev:null,next:null}:null,this._bookKeeper=t||new Pt(this),this._freeHead&&this._bookKeeper.rangeCreated(this._freeHead)}allocate(e){const t=this._bookKeeper.findBestRange(e);if(t==null)return-1;const s=t.from,i=t.count;if(t.from+=e,t.count-=e,this._bookKeeper.rangeResized(t,s,i),this._allocated+=e,t.count===0){const r=t.prev!==null?this._freeHead:t.next;S._removeRange(t),this._freeHead=r}return s}free(e,t){const[s,i]=this._bookKeeper.findAdjacentRanges(e,t),r={from:e,count:t,prev:s!=null?s:null,next:i!=null?i:null};if(s!=null&&(s.next=r),i!=null&&(i.prev=r),this._bookKeeper.rangeCreated(r),this._allocated-=t,i!=null&&r.from+r.count===i.from){const n=r.from,a=r.count;S._fuse(r,i),S._removeRange(i),this._bookKeeper.rangeResized(r,n,a),this._bookKeeper.rangeResized(i,void 0,0)}if(s!=null&&s.from+s.count===r.from){const n=s.from,a=s.count;S._fuse(s,r),S._removeRange(r),this._bookKeeper.rangeResized(s,n,a),this._bookKeeper.rangeResized(r,void 0,0)}this._freeHead=r.prev!==null?this._freeHead:r}get fragmentation(){const e=this._size-this._allocated;return e===0?0:1-this._bookKeeper.largestRange.count/e}static _removeRange(e){e.prev!==null?e.next!==null?(e.prev.next=e.next,e.next.prev=e.prev):e.prev.next=null:e.next!==null&&(e.next.prev=null)}static _fuse(e,t){e.count+=t.count,e.next=t.next,t.from+=t.count,t.count=0,t.next!==null&&(t.next.prev=e)}}const K=["FILL","LINE","MARKER","TEXT","LABEL"];function Vt(o){const e=o.getStrides(),t={};for(let s=0;s<e.length;s++)t[K[s]]=e[s];return t}const Te=.5;class se{constructor(e,t,s,i){this._strides=e,this._displayList=t,this._freeListsAndStorage={},this._dirtyMap=null,this._dirtyMap=s;for(const r in e){this._freeListsAndStorage[r]={vtxFreeList:i?new S(i):null,idxFreeList:i?new S(i):null,vertexBuffers:{},indexBuffer:i?new Uint32Array(i):null};for(const n in e[r])this._freeListsAndStorage[r].vertexBuffers[n]={data:i?fe(i,e[r][n]):null,stride:e[r][n]}}}static fromTileData(e,t){var c,d;const s=Vt(e),i=[0,0,0,0,0],r=[0,0,0,0,0];for(const h of e.tileDisplayData.displayObjects)for(const l of h.displayRecords)i[l.geometryType]=Math.max(i[l.geometryType],l.vertexFrom+l.vertexCount),r[l.geometryType]=Math.max(r[l.geometryType],l.indexFrom+l.indexCount);const n=new se(s,e.tileDisplayData.displayList,t,void 0),a=(d=(c=e.tileBufferData)==null?void 0:c.geometries)!=null?d:[];for(let h=0;h<a.length;++h){const l=i[h],u=r[h],f=a[h],m=K[h],p=n._storageFor(m),g=a[h].indexBuffer;p.indexBuffer=g,p.idxFreeList=new S(g.length),p.idxFreeList.allocate(u);let _=0;for(const x in f.vertexBuffer){const v=a[h].vertexBuffer[x];p.vertexBuffers[x].data=v.data,p.vertexBuffers[x].stride=v.stride;const Z=J(v.stride),Ue=v.data.length*Z/v.stride;_||(_=Ue)}p.vtxFreeList=new S(_),p.vtxFreeList.allocate(l)}return n}delete(e){const t=K[e.geometryType];this._freeVertices(t,e.vertexFrom,e.vertexCount),this._freeIndices(t,e.indexFrom,e.indexCount),this._displayList.removeFromList(e),e.vertexFrom=void 0,e.indexFrom=void 0}setMeshData(e,t,s,i,r){const n=K[e.geometryType];let a,c;e.meshData=null,e.vertexFrom===void 0?(c=t.vertexCount,a=this._allocateVertices(n,c)):t.vertexCount>e.vertexCount?(this._freeVertices(n,e.vertexFrom,e.vertexCount),c=t.vertexCount,a=this._allocateVertices(n,c)):t.vertexCount===e.vertexCount?(a=e.vertexFrom,c=e.vertexCount):(this._freeVertices(n,e.vertexFrom+t.vertexCount,e.vertexCount-t.vertexCount),a=e.vertexFrom,c=t.vertexCount);let d,h,l,u=!0;if(e.indexFrom===void 0?(d=r,l=t.indexCount,h=this._allocateIndices(n,l)):t.indexCount>e.indexCount?(d=this._displayList.removeFromList(e),this._freeIndices(n,e.indexFrom,e.indexCount),l=t.indexCount,h=this._allocateIndices(n,l)):t.indexCount===e.indexCount?(u=!1,h=e.indexFrom,l=e.indexCount):(d=this._displayList.removeFromList(e),this._freeIndices(n,e.indexFrom+t.indexCount,e.indexCount-t.indexCount),h=e.indexFrom,l=t.indexCount),a!==-1&&h!==-1){const f=this._storageFor(n);if(ce(a,h,f.vertexBuffers,f.indexBuffer,t,s,i),e.vertexFrom=a,e.indexFrom=h,e.vertexCount=t.vertexCount,e.indexCount=t.indexCount,this._dirtyMap){this._dirtyMap.markDirtyIndices(e.geometryType,e.indexFrom,e.indexCount);for(const m in s)this._dirtyMap.markDirtyVertices(e.geometryType,m,e.vertexFrom,e.vertexCount)}return u&&this._displayList.addToList(e,d),!0}return a!==-1&&this._freeVertices(n,a,c),h!==-1&&this._freeIndices(n,h,l),e.setMeshDataFromBuffers(t,s,i),e.vertexFrom=void 0,e.vertexCount=0,e.indexFrom=void 0,e.indexCount=0,!1}tryAddMeshData(e,t){const s=t.vertexBuffer,i=t.indexBuffer,r=K[e.geometryType],n=this._allocateVertices(r,e.vertexCount);if(n===-1)return this._freeVertices(r,n,e.vertexCount),!1;const a=this._allocateIndices(r,e.indexCount);if(a===-1)return this._freeVertices(r,n,e.vertexCount),this._freeIndices(r,a,e.indexCount),!1;const c=this._storageFor(r);if(ce(n,a,c.vertexBuffers,c.indexBuffer,e,s,i),e.vertexFrom=n,e.indexFrom=a,this._dirtyMap){this._dirtyMap.markDirtyIndices(e.geometryType,e.indexFrom,e.indexCount);for(const d in s)this._dirtyMap.markDirtyVertices(e.geometryType,d,n,e.vertexCount)}return this._displayList.addToList(e),!0}_allocateVertices(e,t){var n,a;const s=this._storageFor(e),i=(n=s.vtxFreeList)==null?void 0:n.allocate(t);if(i==null||i===-1)return-1;const r=(a=s.vtxFreeList)==null?void 0:a.fragmentation;return r==null||r>Te?-1:i}_freeVertices(e,t,s){var i;(i=this._storageFor(e).vtxFreeList)==null||i.free(t,s)}_freeIndices(e,t,s){var i;(i=this._storageFor(e).idxFreeList)==null||i.free(t,s)}_allocateIndices(e,t){var n,a;const s=this._storageFor(e),i=(n=s.idxFreeList)==null?void 0:n.allocate(t);if(i==null||i===-1)return-1;const r=(a=s.idxFreeList)==null?void 0:a.fragmentation;return r==null||r>Te?-1:i}_storageFor(e){return this._freeListsAndStorage[e]}_stridesFor(e,t){return this._strides[e][t]}}class jt{constructor(e){this.geometryMap=_t(()=>({indexBuffer:De.createIndex(e,wt.STATIC_DRAW),vao:null}),(t,s)=>({vertexBuffer:De.createVertex(e,vt[s])}))}dispose(){for(let e=0;e<5;e++){const t=this.geometryMap[e];if(t){t.data.vao&&t.data.vao.dispose(!1),t.data.indexBuffer&&t.data.indexBuffer.dispose();for(const s in t.buffers)t.buffers[s]&&t.buffers[s].data.vertexBuffer.dispose()}}}get(e){const t=this.geometryMap[e];return{getVAO(s,i,r){if(!t.data.vao){const n={};for(const a in t.buffers)n[a]=t.buffers[a].data.vertexBuffer;t.data.vao=new Ct(s,r,i,n,t.data.indexBuffer)}return t.data.vao}}}has(e){return this.geometryMap[e]!=null}upload(e,t){t.forEach((s,i)=>{this._upload(s,i,e)})}_upload(e,t,s){if(e.indices&&(e.indices.allDirty?this._uploadIndices(s,t):e.indices.from!=null&&e.indices.count!=null&&this._uploadIndices(s,t,e.indices.from,e.indices.count)),e.vertices){const i=e.vertices;for(const r in i){const n=i[r];n.allDirty?this._uploadVertices(s,t,r):n.from!=null&&n.count!=null&&this._uploadVertices(s,t,r,n.from,n.count)}}}_uploadVertices(e,t,s,i,r){const n=this.geometryMap[t];if(!n)return;const a=e.geometries[t].vertexBuffer[s];if(!a)return;const{data:c,stride:d}=a;if(n.buffers[s]&&c.length>0){const h=d/c.BYTES_PER_ELEMENT;i!=null&&r!=null?n.buffers[s].data.vertexBuffer.setSubData(c,i*h,i*h,(i+r)*h):n.buffers[s].data.vertexBuffer.setData(c)}}_uploadIndices(e,t,s,i){const r=this.geometryMap[t];if(!r)return;const n=e.geometries[t].indexBuffer;r.data.indexBuffer&&n.length>0&&(s!=null&&i!=null?r.data.indexBuffer.setSubData(n,s,s,s+i):r.data.indexBuffer.setData(n))}}class kt extends Tt{constructor(){super(...arguments),this._data=null,this._displayList=null,this._lastCommitTime=0,this._hasData=!1,this._invalidated=!1,this._wglBuffers=null,this._dirtyMap=new we}destroy(){super.destroy(),this.clear()}get hasData(){return!!this._hasData}get displayObjects(){var e;return(e=this._displayObjects)!=null?e:[]}getGeometry(e){return this._wglBuffers&&this._wglBuffers.has(e)?this._wglBuffers.get(e):null}getDisplayList(){return this._displayList}patch(e){var i,r;if(e.clear===!0)return this.clear(),void(this._hasData=!1);const t=e.addOrUpdate,s=e.remove;!this._data&&t&&((i=t.tileDisplayData)==null?void 0:i.displayObjects.length)?(t.tileDisplayData.computeDisplayList(),this._dirtyMap=new we,this._dispRecStore=se.fromTileData(t,this._dirtyMap),this._data=t,this._dirtyMap.markAllDirty(),this._hasData=!0,e.end&&this.ready()):this._data&&(t&&((r=t.tileDisplayData)==null?void 0:r.displayObjects.length)||s.length)?this._doPatchData(e):e.end&&this.ready(),e.end&&!this._data&&this.clear(),this.requestRender(),this.emit("change")}commit(e){e.time&&e.time===this._lastCommitTime||(this._lastCommitTime=e.time,this.visible&&this._data&&(this._wglBuffers||(this._wglBuffers=new jt(e.context)),(this._dirtyMap.hasDirty()||this._invalidated)&&(this._invalidated=!1,this._wglBuffers.upload(this._data.tileBufferData,this._dirtyMap),this._displayList=this._data.tileDisplayData.displayList.clone(),this._displayObjects=this._data.tileDisplayData.displayObjects.slice(),this._dirtyMap.markAllClean())))}clear(){this._data=null,this._displayList=null,this._dispRecStore=null,this._wglBuffers&&(this._wglBuffers.dispose(),this._wglBuffers=null)}_doPatchData(e){this._invalidated=!0,this._patchData(e)||(this._dirtyMap.markAllDirty(),this._data.reshuffle(),this._dispRecStore=se.fromTileData(this._data,this._dirtyMap)),this.requestRender()}_patchData(e){let t=!0;const s=e.addOrUpdate&&e.addOrUpdate.tileDisplayData&&e.addOrUpdate.tileDisplayData.displayObjects||[],i=(e.remove||[]).slice();for(const a of s)a.insertAfter!=null&&i.push(a.id);let r;i.length>0&&(r=new Set(i));const n=this._data.tileDisplayData;for(const a of i){const c=n.displayObjectRegistry.get(a);if(c){n.displayList.removeFromList(c.displayRecords);for(const d of c.displayRecords)this._dispRecStore.delete(d);n.displayObjectRegistry.delete(a)}}r!=null&&r.size&&(n.displayObjects=n.displayObjects.filter(a=>!r.has(a.id)));for(const a of s){let c,d=n.displayObjectRegistry.get(a.id);if(d){const l=d.displayRecords;d.set(a),d.displayRecords=l;const u=d.displayRecords.length;for(let f=0;f<u;++f){const m=d.displayRecords[f],p=a.displayRecords[f];(f>=a.displayRecords.length||m.geometryType!==p.geometryType||m.symbolLevel!==p.symbolLevel||m.zOrder!==p.zOrder||m.materialKey!==p.materialKey)&&(this._dispRecStore.delete(d.displayRecords[f]),f<a.displayRecords.length&&(d.displayRecords[f]=void 0))}d.displayRecords.length=a.displayRecords.length}else{let l;d=a.copy(),d.displayRecords=[],n.displayObjectRegistry.set(a.id,d);const u=n.displayObjects;if(d.insertAfter!=null)if(c={},d.insertAfter>=0){const f=n.displayObjectRegistry.get(d.insertAfter);f?(l=u.indexOf(f)+1,l<u.length?u.splice(l,0,d):(u.push(d),l=u.length)):(u.push(d),l=u.length)}else u.unshift(d),l=0;else u.push(d),l=u.length;if(c){const f=a.displayRecords.length>0?1:0;let m=0;for(let p=l-1;p>=0&&m<f;--p)for(let g=u[p].displayRecords.length-1;g>=0&&m<f;--g){const _=u[p].displayRecords[g],x=n.displayList.getDPInfoType();c[x]||(c[x]=_,++m)}}}const h=a.displayRecords.length;for(let l=0;l<h;++l){const u=a.displayRecords[l];let f=d.displayRecords[l];f?(f.meshData=u.meshData,f.materialKey=u.materialKey):(f=u.copy(),f.vertexFrom=void 0,f.indexFrom=void 0,d.displayRecords[l]=f);const m=u.geometryType,p=n.displayList.getDPInfoType(),g=e.addOrUpdate.tileBufferData.geometries[m],_=g.vertexBuffer,x=g.indexBuffer;let v;c&&(v=c[p]?n.displayList.splitAfter(c[p]):-1),t=this._dispRecStore.setMeshData(f,u,_,x,v)&&t,c&&f.indexFrom!=null&&f.indexFrom!=null&&(c[p]=f)}}return t}}class Ge{constructor(){this._byGeometryType=null}get satisfied(){return!this._byGeometryType}reset(){this._byGeometryType=null}verticesFor(e){return this._byGeometryType?this._byGeometryType[e].vertices:0}indicesFor(e){return this._byGeometryType?this._byGeometryType[e].indices:0}needMore(e,t,s){if(!t&&!s)return;this._byGeometryType||(this._byGeometryType=[{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0}]);const i=this._byGeometryType[e];i.vertices+=t,i.indices+=s}}const ae=5;class G{constructor(){this.geometries=[{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}}]}clone(){const e=new G;for(let t=0;t<this.geometries.length;t++){const s=this.geometries[t],i=e.geometries[t];i.indexBuffer=s.indexBuffer.slice(),i.vertexBuffer={};for(const r in s.vertexBuffer){const{data:n,stride:a}=s.vertexBuffer[r];i.vertexBuffer[r]={data:n.slice(),stride:a}}}return e}static deserialize(e){const t=new G;for(let s=0;s<ae;++s){t.geometries[s].indexBuffer=new Uint32Array(e.geometries[s].indexBuffer),t.geometries[s].vertexBuffer={};for(const i in e.geometries[s].vertexBuffer)t.geometries[s].vertexBuffer[i]={data:te(e.geometries[s].vertexBuffer[i].data,e.geometries[s].vertexBuffer[i].stride),stride:e.geometries[s].vertexBuffer[i].stride}}return t}serialize(){const e={geometries:[{indexBuffer:this.geometries[0].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[1].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[2].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[3].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[4].indexBuffer.buffer,vertexBuffer:{}}]};for(let t=0;t<ae;++t)for(const s in this.geometries[t].vertexBuffer)e.geometries[t].vertexBuffer[s]={data:this.geometries[t].vertexBuffer[s].data.buffer,stride:this.geometries[t].vertexBuffer[s].stride};return e}getBuffers(){const e=[];for(let t=0;t<ae;++t){e.push(this.geometries[t].indexBuffer.buffer);for(const s in this.geometries[t].vertexBuffer)e.push(this.geometries[t].vertexBuffer[s].data.buffer)}return e}}function X(o,e,t,...s){e<o.length?o.splice(e,t,...s):o.push(...s)}class pe{constructor(){this.symbolLevels=[]}replay(e,t,s){for(const i of this.symbolLevels)for(const r of i.zLevels){const n=r.geometryDPInfo.unified;if(n)for(const a of n){const{geometryType:c,materialKey:d,indexFrom:h,indexCount:l}=a,u=Ft.load(d).symbologyType,f=e.painter.getBrush(c,u),m={geometryType:c,materialKey:d,indexFrom:h,indexCount:l,target:t.getGeometry(c)};f.prepareState(e),f.drawGeometry(e,t,m,s)}}}get empty(){return!this.symbolLevels||this.symbolLevels.length===0}clear(){this.symbolLevels.length=0}addToList(e,t){if(Array.isArray(e))for(const s of e)this._addToList(s,t);else this._addToList(e,t)}removeFromList(e){Array.isArray(e)||(e=[e]);let t=null;for(const s of e)t=this._removeFromList(s);return t}clone(){const e=new pe;for(const t of this.symbolLevels)e.symbolLevels.push(t.clone());return e}splitAfter(e){const t=this._getDisplayList(e.symbolLevel,e.zOrder),s=t.length,i=e.indexFrom+e.indexCount;for(let r=0;r<s;++r){const n=t[r];if(n.geometryType===e.geometryType&&i>n.indexFrom&&i<=n.indexFrom+n.indexCount){if(i<n.indexFrom+n.indexCount){const a=new E;a.geometryType=n.geometryType,a.materialKey=n.materialKey,a.indexFrom=i,a.indexCount=n.indexFrom+n.indexCount-i,t.splice(r+1,0,a),n.indexCount=i-n.indexFrom}return r}}}_addToList(e,t){const s=e.symbolLevel,i=e.zOrder,r=this._getDisplayList(s,i),n=t!=null?t:r.length-1,a=n>=0&&n<r.length?r[n]:null;if(a!==null&&a.materialKey===e.materialKey&&a.indexFrom+a.indexCount===e.indexFrom&&a.geometryType===e.geometryType)a.indexCount+=e.indexCount;else{const c=new E;c.indexFrom=e.indexFrom,c.indexCount=e.indexCount,c.materialKey=e.materialKey,c.geometryType=e.geometryType,X(r,n+1,0,c)}}_removeFromList(e){const t=e.symbolLevel,s=e.zOrder,i=this._getDisplayList(t,s),r=i.length;let n;for(let a=0;a<r;++a){const c=i[a];if(e.indexFrom+e.indexCount>c.indexFrom&&e.indexFrom<c.indexFrom+c.indexCount&&c.geometryType===e.geometryType){n=a;break}}if(n!==void 0){const a=i[n];if(e.indexFrom===a.indexFrom)return a.indexCount-=e.indexCount,a.indexFrom+=e.indexCount,a.indexCount===0&&X(i,n,1),n-1;if(e.indexFrom+e.indexCount===a.indexFrom+a.indexCount)return a.indexCount-=e.indexCount,a.indexCount===0?(X(i,n,1),n-1):n;{const c=a.indexFrom,d=e.indexFrom-a.indexFrom,h=e.indexCount,l=a.indexFrom+a.indexCount-(e.indexFrom+e.indexCount);a.indexCount=d;const u=new E;return u.geometryType=a.geometryType,u.materialKey=a.materialKey,u.indexFrom=c+d+h,u.indexCount=l,X(i,n+1,0,u),n}}return null}_getDisplayList(e,t){let s;const i=this.symbolLevels.length;for(let a=0;a<i;a++)if(this.symbolLevels[a].symbolLevel===e){s=this.symbolLevels[a];break}let r;s||(s=new ye,s.symbolLevel=e,this.symbolLevels.push(s));const n=s.zLevels.length;for(let a=0;a<n;a++)if(s.zLevels[a].zLevel===t){r=s.zLevels[a];break}return r||(r=new me,r.geometryDPInfo=new re,r.zLevel=t,s.zLevels.push(r)),r.geometryDPInfo.unified||(r.geometryDPInfo.unified=[]),r.geometryDPInfo.unified}getDPInfoType(){return"unified"}}class E{constructor(){this.materialKey=null,this.indexFrom=0,this.indexCount=0}clone(){const e=new E;return e.geometryType=this.geometryType,e.materialKey=this.materialKey,e.indexFrom=this.indexFrom,e.indexCount=this.indexCount,e}}class re{constructor(){this.fill=null,this.line=null,this.marker=null,this.text=null,this.label=null,this.unified=null}clone(){const e=new re;return e.fill=this.fill&&this.fill.map(t=>t.clone()),e.line=this.line&&this.line.map(t=>t.clone()),e.marker=this.marker&&this.marker.map(t=>t.clone()),e.text=this.text&&this.text.map(t=>t.clone()),e.label=this.label&&this.label.map(t=>t.clone()),e.unified=this.unified&&this.unified.map(t=>t.clone()),e}}class me{constructor(){this.geometryDPInfo=new re}clone(){const e=new me;return e.zLevel=this.zLevel,e.geometryDPInfo=this.geometryDPInfo.clone(),e}}class ye{constructor(){this.zLevels=[]}clone(){const e=new ye;e.symbolLevel=this.symbolLevel;for(const t of this.zLevels)e.zLevels.push(t.clone());return e}}class Be{constructor(){this.vertexData=new Map,this.vertexCount=0,this.indexData=[]}clear(){this.vertexData.clear(),this.vertexCount=0,this.indexData=[]}update(e,t,s){for(const i in e)this.vertexData.set(i,e[i]);for(const i in this.vertexData)e[i]===null&&this.vertexData.delete(i);this.vertexCount=t,this.indexData=s}}class P{constructor(e,t,s,i=0,r=0){this.id=e,this.geometryType=t,this.materialKey=s,this.minZoom=i,this.maxZoom=r,this.meshData=null,this.symbolLevel=0,this.zOrder=0,this.vertexFrom=0,this.vertexCount=0,this.indexFrom=0,this.indexCount=0,this._sortKey=null}get sortKey(){return this._sortKey==null&&this._computeSortKey(),this._sortKey}clone(){return this.copy()}copy(){const e=new P(this.id,this.geometryType,this.materialKey);return e.vertexFrom=this.vertexFrom,e.vertexCount=this.vertexCount,e.indexFrom=this.indexFrom,e.indexCount=this.indexCount,e.zOrder=this.zOrder,e.symbolLevel=this.symbolLevel,e.meshData=this.meshData,e.minZoom=this.minZoom,e.maxZoom=this.maxZoom,e}setMeshDataFromBuffers(e,t,s){const i=new Be;for(const r in t){const n=t[r].stride,a=t[r].data;if(!a)continue;const c=[],d=J(n);for(let h=0;h<n*e.vertexCount/d;++h)c[h]=a[h+n*e.vertexFrom/d];i.vertexData.set(r,c)}i.indexData.length=0;for(let r=0;r<e.indexCount;++r)i.indexData[r]=s[r+e.indexFrom]-e.vertexFrom;i.vertexCount=e.vertexCount,this.meshData=i}readMeshDataFromBuffers(e,t){this.meshData?this.meshData.clear():this.meshData=new Be;for(const s in e){const i=e[s].stride,r=e[s].data,n=[],a=J(i);for(let c=0;c<i*this.vertexCount/a;++c)n[c]=r[c+i*this.vertexFrom/a];this.meshData.vertexData.set(s,n)}this.meshData.indexData.length=0;for(let s=0;s<this.indexCount;++s)this.meshData.indexData[s]=t[s+this.indexFrom]-this.vertexFrom;this.meshData.vertexCount=this.vertexCount}writeMeshDataToBuffers(e,t,s,i){if(this.meshData){for(const r in t){const n=t[r].stride,a=this.meshData.vertexData.get(r),c=t[r].data,d=J(n);for(let h=0;h<n*this.meshData.vertexCount/d;++h)c[h+n*e/d]=a[h]}for(let r=0;r<this.meshData.indexData.length;++r)i[r+s]=this.meshData.indexData[r]+e;this.vertexFrom=e,this.vertexCount=this.meshData.vertexCount,this.indexFrom=s,this.indexCount=this.meshData.indexData.length}}static writeAllMeshDataToBuffers(e,t,s){let i=0,r=0;for(const n of e)n.writeMeshDataToBuffers(i,t,r,s),i+=n.vertexCount,r+=n.indexCount}_computeSortKey(){this._sortKey=(31&this.symbolLevel)<<12|(127&this.zOrder)<<4|7&this.geometryType}serialize(e){return e.push(this.geometryType),e.push(this.materialKey),e.push(this.vertexFrom),e.push(this.vertexCount),e.push(this.indexFrom),e.push(this.indexCount),e.push(this.minZoom),e.push(this.maxZoom),e}static deserialize(e,t){const s=e.readInt32(),i=e.readInt32(),r=new P(t.id,s,i);return r.vertexFrom=e.readInt32(),r.vertexCount=e.readInt32(),r.indexFrom=e.readInt32(),r.indexCount=e.readInt32(),r.minZoom=e.readInt32(),r.maxZoom=e.readInt32(),r}}function Oe(o,e){if(e!==null){o.push(e.length);for(const t of e)t.serialize(o);return o}o.push(0)}function Kt(o,e,t){const s=o.readInt32(),i=new Array(s);for(let r=0;r<i.length;r++)i[r]=e.deserialize(o,t);return i}class O{constructor(e){this.insertAfter=null,this.id=e,this.displayRecords=[]}copy(){const e=new O(this.id);return e.set(this),e}clone(){const e=new O(this.id);return e.displayRecords=this.displayRecords.map(t=>t.clone()),e.insertAfter=this.insertAfter,e}set(e){this.id=e.id,this.displayRecords=e.displayRecords,this.insertAfter=e.insertAfter}serialize(e){return e.push(this.id),Oe(e,this.displayRecords),e}static deserialize(e){var r;const t=e.readInt32(),s=new O(t),i={id:t};return s.displayRecords=(r=Kt(e,P,i))!=null?r:[],s}}class q{constructor(){this.displayObjects=[],this._displayList=null}get displayObjectRegistry(){if(!this._displayObjectRegistry){this._displayObjectRegistry=new Map;for(const e of this.displayObjects)this._displayObjectRegistry.set(e.id,e)}return this._displayObjectRegistry}get displayList(){return this._displayList}computeDisplayList(){this._displayList=new pe;for(const e of this.displayObjects)for(const t of e.displayRecords)this._displayList.addToList(t)}clone(){const e=new q;return this.displayObjects&&(e.displayObjects=this.displayObjects.map(t=>t.clone())),e}serialize(e){return Oe(e,this.displayObjects),e}_deserializeObjects(e){const t=e.readInt32(),s=new Array(t),i=new Map;for(let r=0;r<s.length;++r){const n=O.deserialize(e);s[r]=n,i.set(n.id,n)}this.displayObjects=s,this._displayList=null,this._displayObjectRegistry=i}static deserialize(e){const t=new q;return t._deserializeObjects(e),t}}class U{constructor(e,t){this.data=e,this.stride=t}static decode(e){const t=te(e.data,e.stride),s=e.stride;return new U(t,s)}static fromVertexVector(e){const t=te(e.data.buffer(),e.stride),s=e.stride;return new U(t,s)}}class ${constructor(e,t,s){this.geometryType=e,this.indexBuffer=new Uint32Array(t),this.namedBuffers=s}static decode(e){const t=e.geometryType,s=e.indexBuffer,i={};for(const r in e.namedBuffers)i[r]=U.decode(e.namedBuffers[r]);return new $(t,s,i)}static fromVertexData(e,t){const s=e.indices,i=te(e.vertices,e.stride),r=e.stride,n={geometry:new U(i,r)};return new $(t,s,n)}static fromVertexVectors(e){const t=e.geometryType,s=e.indexVector.buffer(),i={};for(const r in e.namedVectors)i[r]=U.fromVertexVector(e.namedVectors[r]);return new $(t,s,i)}}class Et{get vertexCount(){const e=this.stride/4,t=this.data.length/e;return t!==(0|t)&&console.debug("Corrupted stride"),t}constructor(e,t){this.data=e,this.stride=t}transfer(e,t){const s=this.data.buffer();e.vertexCount=this.vertexCount,e.data=s,e.stride=this.stride,t.push(s)}}class Ht{constructor(e,t,s){this.geometryType=e,this.indexVector=new ee(Uint32Array,6*t),this.namedVectors={};const i=bt(e,s);for(const r in i){const n=i[r];let a;switch(n%4){case 0:case 2:a=new ee(Uint32Array,n*t);break;case 1:case 3:a=new ee(Uint8Array,n*t)}this.namedVectors[r]=new Et(a,n)}}get(e){return this.namedVectors[e].data}getVector(e){return this.namedVectors[e]}transfer(e,t){const s=this.indexVector.buffer(),i={};t.push(s);for(const r in this.namedVectors){const n=this.namedVectors[r];i[r]={},n.transfer(i[r],t)}e.geometryType=this.geometryType,e.indexBuffer=s,e.namedBuffers=i,this.destroy()}intoBuffers(){const e=$.fromVertexVectors(this);return this.destroy(),e}destroy(){this.indexVector=null,this.namedVectors=null}}const Q=new Ge,M=new Ge,Fe=1.5,qt=5;function Zt(o,e){const t={};for(const s in o){const i={data:fe(e,o[s]),stride:o[s]};t[s]=i}return t}function Nt(o){return[o.fill||{},o.line||{},o.icon||{},o.text||{},o.label||{}]}function Yt(o){const e=[[],[],[],[],[]],t=o;for(const s of t)for(const i of s.displayRecords)e[i.geometryType].push(i);return e}class B{constructor(){this.tileDisplayData=null,this.tileBufferData=null}reshuffle(){var n,a,c;if(Q.reset(),!this.tileDisplayData)return;const e=Yt(this.tileDisplayData.displayObjects);for(const d of e)for(const h of d)h&&Q.needMore(h.geometryType,h.meshData?h.meshData.vertexCount:h.vertexCount,h.meshData?h.meshData.indexData.length:h.indexCount);const t=e.length,s=new G;for(let d=0;d<t;++d){s.geometries[d].indexBuffer=new Uint32Array(Math.round(Fe*Q.indicesFor(d)));const h=[],l=(n=this.tileBufferData)==null?void 0:n.geometries[d].vertexBuffer;if(!l)continue;for(const p in l)h.push(l[p].stride);const u=B._computeVertexAlignment(h),f=Math.round(Fe*Q.verticesFor(d)),m=B._align(f,u);for(const p in l){const g=l[p].stride;s.geometries[d].vertexBuffer[p]={stride:g,data:fe(m,g)}}}M.reset(),(a=this.tileDisplayData.displayList)==null||a.clear();for(let d=0;d<t;++d){const h=e[d];for(const l of h){if(l.meshData)l.writeMeshDataToBuffers(M.verticesFor(d),s.geometries[d].vertexBuffer,M.indicesFor(d),s.geometries[d].indexBuffer),l.meshData=null;else{const u=(c=this.tileBufferData)==null?void 0:c.geometries[d];if(u){const f=u.vertexBuffer,m=u.indexBuffer,p=s.geometries[d].vertexBuffer,g=s.geometries[d].indexBuffer,_=M.verticesFor(d),x=M.indicesFor(d);ce(_,x,p,g,l,f,m),l.vertexFrom=_,l.indexFrom=x}}M.needMore(d,l.vertexCount,l.indexCount)}}const{displayList:i,displayObjects:r}=this.tileDisplayData;if(i)for(const d of r)i.addToList(d.displayRecords);this.tileBufferData=s}getStrides(){var s;const e=[],t=(s=this.tileBufferData)==null?void 0:s.geometries;if(!t)return e;for(let i=0;i<t.length;++i){const r=t[i];e[i]={};for(const n in r.vertexBuffer)e[i][n]=r.vertexBuffer[n].stride}return e}clone(){var t,s,i,r;const e=new B;return e.tileBufferData=(s=(t=this.tileBufferData)==null?void 0:t.clone())!=null?s:null,e.tileDisplayData=(r=(i=this.tileDisplayData)==null?void 0:i.clone())!=null?r:null,e}_guessSize(){var n,a;const e=(a=(n=this.tileDisplayData)==null?void 0:n.displayObjects)!=null?a:[],t=Math.min(e.length,4),s=12,i=40;let r=0;for(let c=0;c<t;c++)r=Math.max(r,e[c].displayRecords.length);return 2*(e.length*s+e.length*r*i)}serialize(){const e=this.tileBufferData.serialize(),t=this.tileBufferData.getBuffers(),s=this.tileDisplayData.serialize(new ee(Int32Array,this._guessSize())).buffer();return t.push(s),{result:{displayData:s,bufferData:e},transferList:t}}static fromVertexData(e,t){const s={},i=new Map;for(const r of t)i.set(r.id,r);return Dt(r=>{const n=e.data[r];if(F(n)){const a=Bt.from(n.records).getCursor();for(;a.next();){const c=a.id,d=a.materialKey,h=a.indexFrom,l=a.indexCount,u=a.vertexFrom,f=a.vertexCount,m=i.get(c),p=new P(c,r,d);p.indexFrom=h,p.indexCount=l,p.vertexFrom=u,p.vertexCount=f,m.displayRecords.push(p)}s[r]=$.fromVertexData(n,r)}else s[r]=new Ht(r,0,Ae.DEFAULT).intoBuffers()}),B.fromMeshData({displayObjects:t,vertexBuffersMap:s})}static fromMeshData(e){const t=new B,s=new q,i=new G;s.displayObjects=e.displayObjects;for(const r in e.vertexBuffersMap){const n=e.vertexBuffersMap[r];i.geometries[r].indexBuffer=n.indexBuffer,i.geometries[r].vertexBuffer=n.namedBuffers}return t.tileDisplayData=s,t.tileBufferData=i,t}static bind(e,t){const s=new B;return s.tileDisplayData=e,s.tileBufferData=t,s}static create(e,t){const s=new B;s.tileDisplayData=new q,s.tileDisplayData.displayObjects=e;const i=[0,0,0,0,0],r=[0,0,0,0,0],n=[[],[],[],[],[]];for(const d of e)for(const h of d.displayRecords)n[h.geometryType].push(h),i[h.geometryType]+=h.meshData.vertexCount,r[h.geometryType]+=h.meshData.indexData.length;const a=new G,c=Nt(t);for(let d=0;d<qt;d++){const h=new Uint32Array(r[d]),l=Zt(c[d],i[d]);P.writeAllMeshDataToBuffers(n[d],l,h),a.geometries[d]={indexBuffer:h,vertexBuffer:l}}return s.tileBufferData=a,s}static _align(e,t){const s=e%t;return s===0?e:e+(t-s)}static _computeVertexAlignment(e){let t=!1,s=!1;for(const i of e)i%4==2?t=!0:i%4!=0&&(s=!0);return s?4:t?2:1}}const L=512,R=50;function Xt(o,e){const t=H(e);if(!t)return null;const[s,i]=t.valid;return o[2]>i?[w([o[0],o[1],i,o[3]]),w([s,o[1],s+o[2]-i,o[3]])]:o[0]<s?[w([s,o[1],o[2],o[3]]),w([i-(s-o[0]),o[1],i,o[3]])]:null}function Qt(o){return o==="text"||o==="esriTS"}function Wt(o){return o==="simple-marker"||o==="picture-marker"||o==="esriSMS"||o==="esriPMS"}function Se(o){switch(Pe(o.geometry).type){case"point":case"multipoint":return 0;case"polyline":return 1;case"polygon":case"extent":return 2}return 0}function Jt(o){if(!o)return null;const{xmin:e,ymin:t,xmax:s,ymax:i,spatialReference:r}=o;return new $e({rings:[[[e,t],[e,i],[s,i],[s,t],[e,t]]],spatialReference:r})}class ie extends At{static from(e,t,s){const i=Gt.createInstance(),r=[],n=e.filter(a=>!!a.geometry);for(const a of n){const c=ue(a.geometry);Ve(r,[a],c,!1,!1,t)}return new ie(i,r,s)}constructor(e,t,s){super(e,t,null),this._transform=s}get geometryType(){const e=this._current;return e?e.geometryType:null}get insertAfter(){return this._current.insertAfter}readGraphic(){return this._current}getCursor(){return this.copy()}copy(){const e=new ie(this.instance,this._features,this._transform);return this.copyInto(e),e}}const j=new Le,le=new Le,Re="esriGeometryPolyline";function Ie(o){o.coords.length=0,o.lengths.length=0}class I{constructor(){this.bounds=w(),this.graphic=null}static acquire(e=null,t,s,i,r){let n;return I._pool.length===0?n=new I:(n=I._pool.pop(),this._set.delete(n)),n.acquire(e,t,s,i,r),n}static release(e){e&&!this._set.has(e)&&(e.release(),this._pool.push(e),this._set.add(e))}static getCentroidQuantized(e,t){if(de(e.geometry)){const s=e.symbol;if(A(s))return null;if((s==null?void 0:s.layers.length)>0&&s.layers.some(i=>i.type==="text"||i.type==="marker")){const i=je(e.geometry);return i!==null?ke(t,{},{x:i[0],y:i[1]},!1,!1):null}}return null}acquire(e=null,t,s,i,r){e&&this.set(e,t,s,i,r)}release(){this.graphic=null,this.symbolResource=null,this.geometry=null}get symbol(){return this.symbolResource.symbol}set(e,t,s,i,r){this.graphic=e,this.geometry=s,this.symbolResource=t,this.bounds=i,r&&(this.size=r)}getGeometryQuantized(e,t,s,i){var a,c,d,h;const r=this.geometry,n=ue(r);if(A(n))return null;switch(n){case"esriGeometryPolygon":{const l=r,{rings:u}=l;if(!u||u.length===0)return null;let f;if(f=u.length===1&&u[0].length===2?V(e,{paths:[[u[0][0],u[0][1]]]}):V(e,this.geometry),!f){const m={x:u[0][0][0],y:u[0][0][1]};if(f=V(e,m),f){const{x:p,y:g}=f;return{rings:[[[p-1,g],[1,-1],[1,1],[-1,1],[-1,-1]]]}}}return f}case"esriGeometryPolyline":{const l=r;Ie(j),Ie(le);const u=(a=l.hasZ)!=null?a:!1,f=(c=l.hasM)!=null?c:!1;return Ke(j,l),Ee(le,j,u,f,Re,e.scale[0]),He(j,le,u,f,Re,e),qe(j,(d=l.hasZ)!=null?d:!1,(h=l.hasM)!=null?h:!1)}case"esriGeometryMultipoint":{const l=r,u=.5*i*Math.max(Math.abs(this.size[0])+this.size[2]-this.size[0],Math.abs(this.size[1])+this.size[3]-this.size[1]),f=H(s);let m=l.points;if(f){const[p,g]=f.valid,_=g-p;m=m.filter(x=>{if(x[0]+u>g||x[0]-u<p){const v=[...x];return x[0]+u>g?v[0]-=_:v[0]+=_,ne(t,x,u)||ne(t,v,u)}return ne(t,x,u)})}return m.length===0?{points:m}:V(e,{points:m})}}return V(e,this.geometry)}}I._pool=[],I._set=new Set;const k={minX:0,minY:0,maxX:0,maxY:0},z=w(),Me=1e-5;function W(o,e,t,s,i){return k.minX=e,k.minY=t,k.maxX=s,k.maxY=i,o.search(k)}function es(o){return{minX:o.bounds[0],minY:o.bounds[1],maxX:o.bounds[2],maxY:o.bounds[3]}}class ts{constructor(e,t,s,i,r,n,a){this._graphics=i,this._onAdd=r,this._onRemove=n,this._hashToCIM=a,this._index=Ze(9,es),this._itemByGraphic=new Map,this._inflatedSizeHelper=new be,this._tileInfoView=e,this._uidFieldName=s;const c=e.getClosestInfoForScale(t);c&&(this._resolution=this._tileInfoView.getTileResolution(c.level))}setResourceManager(e){this._cimResourceManager=e,this._hittestDrawHelper=new pt(e)}hitTest(e,t,s,i,r){var m;e=Ne(e,this._tileInfoView.spatialReference);const n=.5*i*window.devicePixelRatio*s;z[0]=e-n,z[1]=t-n,z[2]=e+n,z[3]=t+n;const a=.5*i*(s+R),c=W(this._index,e-a,t-a,e+a,t+a);if(!c||c.length===0)return[];const d=[],h=w(),l=w();for(const p of c){const{geometry:g,symbolResource:_}=p;this._getSymbolBounds(h,_,g,l,r),l[3]=l[2]=l[1]=l[0]=0,Ye(h,z)&&((m=p.graphic)==null?void 0:m.visible)&&d.push(p)}if(d.length===0)return[];const u=this._hittestDrawHelper,f=[];for(const p of d){const{geometry:g,symbolResource:_}=p,{hash:x,textInfo:v}=_,Z=this._hashToCIM.get(x);Z&&u.hitTest(z,Z.symbol,g,v,r,i)&&f.push(p)}return f.sort(ss),f.map(p=>p.graphic)}getGraphicsData(e,t,s){const i=this._searchForItems(t);if(i.length===0||s.length===0)return[];i.sort((l,u)=>l.zorder-u.zorder),i[0].insertAfter=-1;for(let l=1;l<i.length;l++)i[l].insertAfter=i[l-1].graphic.uid;i.sort((l,u)=>l.graphic.uid-u.graphic.uid),s.sort((l,u)=>l.uid-u.uid);let r,n=0,a=0;const c=t.resolution,d=[],h={originPosition:"upperLeft",scale:[c,c],translate:[t.bounds[0],t.bounds[3]]};for(const l of s){for(a=-2;n<i.length;)if(r=i[n],n++,l.uid===r.graphic.uid){a=r.insertAfter;break}if(!(r!=null&&r.geometry)||a===-2)continue;const u=r.getGeometryQuantized(h,t.bounds,this._tileInfoView.spatialReference,c),f={...r.graphic.attributes};f[this._uidFieldName]=l.uid,r.groupId==null&&(r.groupId=e.createTemplateGroup(r.symbol,null)),d.push({centroid:I.getCentroidQuantized(r,h),geometry:u,attributes:f,symbol:r.symbol,groupId:r.groupId,insertAfter:a,zorder:r.zorder})}return d.sort((l,u)=>l.zorder-u.zorder),d}queryTileData(e,t){if(this._graphics.length===0)return[];const{bounds:s,resolution:i}=t,r=this._searchForItems(t),n=[];return r.length===0||this._createTileGraphics(n,e,r,{originPosition:"upperLeft",scale:[i,i],translate:[s[0],s[3]]},t),n}has(e){return this._itemByGraphic.has(e)}getBounds(e){const t=this._itemByGraphic.get(e);return t?t.bounds:null}getAllBounds(){return Array.from(this._itemByGraphic.values()).filter(e=>e.graphic.visible).map(e=>e.bounds)}addOrModify(e,t,s){if(!e||A(t))return;this.has(e)&&this.remove(e),this._onAdd(e);const i=[0,0,0,0],r=this._getSymbolBounds(null,t,s,i,0),n=I.acquire(e,t,s,F(r)?r:null,i);return this._itemByGraphic.set(e,n),s&&this._index.insert(n),n.bounds}remove(e){if(!this._itemByGraphic.has(e))return;this._onRemove(e);const t=this._itemByGraphic.get(e);t!=null&&t.bounds&&this._index.remove(t),this._itemByGraphic.delete(e)}updateZ(){const e=this._graphics.items;let t,s;for(let i=0;i<e.length;i++)s=e[i],t=this._itemByGraphic.get(s),t&&(t.zorder=i)}update(e,t,s){const i=this._itemByGraphic.get(e);i.groupId=null;const r=Xe(i.bounds);this._index.remove(i);const n=this._getSymbolBounds(i.bounds,t,s,i.size,0);return F(n)&&i.set(e,t,s,n,i.size),s&&this._index.insert(i),{oldBounds:r,newBounds:i.bounds}}updateLevel(e){if(this._resolution===e)return;this._resolution=e,this._index.clear();const t=this._itemByGraphic,s=[];for(const[i,r]of t){const n=this._getSymbolBounds(r.bounds,r.symbolResource,r.geometry,r.size,0);r.geometry&&F(n)&&(r.bounds=n,s.push(r))}this._index.load(s)}clear(){this._itemByGraphic.clear(),this._index.clear()}_createTileGraphics(e,t,s,i,r){const n=this._uidFieldName,a=this._tileInfoView.spatialReference,{bounds:c,resolution:d}=r;let h,l,u,f;s.sort((m,p)=>m.zorder-p.zorder);for(let m=0;m<s.length;m++){u=s[m],h=u.graphic,l=u.getGeometryQuantized(i,c,a,d),f=m===0?-1:s[m-1].graphic.uid;const p={...u.graphic.attributes};p[n]=h.uid,u.groupId==null&&(u.groupId=t.createTemplateGroup(u.symbol,null)),e.push({centroid:I.getCentroidQuantized(u,i),geometry:l,attributes:p,symbol:u.symbol,groupId:u.groupId,insertAfter:f,zorder:u.zorder})}}_searchForItems(e){const t=this._tileInfoView.spatialReference,s=e.bounds,i=H(t);if(i&&t.isWrappable){const[r,n]=i.valid,a=Math.abs(s[2]-n)<Me,c=Math.abs(s[0]-r)<Me;if((!a||!c)&&(a||c)){const d=e.resolution;let h;h=w(a?[r,s[1],r+d*R,s[3]]:[n-d*R,s[1],n,s[3]]);const l=W(this._index,s[0],s[1],s[2],s[3]),u=W(this._index,h[0],h[1],h[2],h[3]);return[...new Set([...l,...u])]}}return W(this._index,s[0],s[1],s[2],s[3])}_getSymbolBounds(e,t,s,i,r){if(!t||!t.symbol||!s)return null;if(e||(e=w()),Qe(e,s),!i||i[0]===0&&i[1]===0&&i[2]===0&&i[3]===0){const{hash:c,textInfo:d}=t,h=this._hashToCIM.get(c);if(!h)return null;i||(i=[0,0,0,0]);const l=this._inflatedSizeHelper.getSymbolInflateSize(i,h.symbol,this._cimResourceManager,r,d);i[0]=N(l[0]),i[1]=N(l[1]),i[2]=N(l[2]),i[3]=N(l[3])}const n=this._resolution,a=be.safeSize(i);return e[0]-=a*n,e[1]-=a*n,e[2]+=a*n,e[3]+=a*n,e}}const ss=(o,e)=>{const t=Se(o.graphic),s=Se(e.graphic);return t===s?e.zorder-o.zorder:t-s},is=o=>{let e=class extends We(o){constructor(){super(...arguments),this.graphics=null,this.renderer=null}};return D([C()],e.prototype,"graphics",void 0),D([C()],e.prototype,"renderer",void 0),D([C()],e.prototype,"updating",void 0),D([C()],e.prototype,"view",void 0),e=D([ze("esri.views.layers.GraphicsView")],e),e},rs=Je("esri-2d-graphic-debug");function he(o,e,t){let s=t.get(o);return s||(s={tile:e,addedOrModified:[],removed:[]},t.set(o,s)),s}let T=class extends is(et(ft)){constructor(o){super(o),this._storage=new Ot,this._displayIds=new Map,this._controller=new AbortController,this._tiles=new Map,this._graphicStoreUpdate=!1,this._graphicsSet=new Set,this._matcher=Promise.resolve(null),this._tileUpdateSet=new Set,this._tilesToUpdate=new Map,this._graphicIdToAbortController=new Map,this._attached=!1,this._updatingGraphicsTimer=null,this._hashToExpandedSymbol=new Map,this._hashToExpandedSymbolPromise=new Map,this._hashToCIMSymbolPromise=new Map,this._hashToCIM=new Map,this._processing=!1,this._needsProcessing=!1,this._pendingUpdate={added:new Set,updated:new Set,removed:new Set},this.lastUpdateId=-1,this.updateRequested=!1,this.defaultPointSymbolEnabled=!0,this.graphicUpdateHandler=this.graphicUpdateHandler.bind(this)}destroy(){this._updatingGraphicsTimer&&(clearTimeout(this._updatingGraphicsTimer),this._updatingGraphicsTimer=null,this.notifyChange("updating")),this._controller.abort(),this.container.destroy(),this._set("graphics",null),this._graphicStore.clear(),this._attributeStore=null,this._hashToExpandedSymbol.clear(),this.view=null,this.renderer=null,this._hashToCIM.clear(),this._hashToCIMSymbolPromise.clear(),this._hashToExpandedSymbolPromise.clear()}_createMatcher(o,e,t){if(o){const s=Ce(o),i=zt({indexCount:0,fields:{}},"feature",o,s);this._matcher=St(i,e,null,t)}}_createDisplayId(o){let e=this._displayIds.get(o);return e||(e=this._storage.createDisplayId(),this._displayIds.set(o,e)),e}initialize(){this._attributeStore=new Ut({type:"local",initialize:i=>Promise.resolve(this.container.attributeView.initialize(i)),update:i=>this.container.attributeView.requestUpdate(i),render:()=>this.container.requestRender()},tt("2d"),()=>this.notifyChange("updating")),this.container.hasHighlight=()=>this._attributeStore.hasHighlight;const o=i=>{this._createDisplayId(i.uid),this._setFilterState(i.uid,i.visible)},e=i=>{const r=this._displayIds.get(i.uid);this._displayIds.delete(i.uid),this._storage.releaseDisplayId(r)},t=new Rt(this.container.getMaterialItems.bind(this.container),this.view.featuresTilingScheme.tileInfo);this._graphicStore=new ts(this.view.featuresTilingScheme,this.view.state.scale,this.uid,this.graphics,o,e,this._hashToCIM),this._meshFactory=new It(null,this.uid,t),this._templateStore=t,this.handles.add([st(()=>this.renderer,i=>{this._createMatcher(i,t,this.container.stage.resourceManager);for(const r of this.graphics)this._pendingUpdate.updated.add(r);this.requestUpdate()}),this.view.graphicsTileStore.on("update",this._onTileUpdate.bind(this)),this.container.on("attach",()=>{rs&&this.container.enableRenderingBounds(()=>this._graphicStore.getAllBounds()),this.graphics.items.length>0&&this._graphicsChangeHandler({target:this.graphics,added:this.graphics.items,removed:[],moved:[]}),this.handles.add(this.graphics.on("change",r=>this._graphicsChangeHandler(r)),"graphics");const i=this.container.stage.resourceManager;this._createMatcher(this.renderer,t,i),this._graphicStore.setResourceManager(i),this._attached=!0,this.notifyChange("updating")})]);const s=this.view.graphicsTileStore.tiles;this._onTileUpdate({added:s,removed:[]})}get updating(){return!this._attached||this._updatingGraphicsTimer!==null||this._tileUpdateSet.size>0||this._tilesToUpdate.size>0||this._attributeStore.isUpdating()}hitTest(o){if(!this.view||!this.view.position)return[];const{resolution:e,rotation:t}=this.view.state;return this._graphicStore.hitTest(o.x,o.y,2,e,t)}update(o){b(this._controller.signal);const e=o.state,{resolution:t}=e;if(this._graphicStore.updateLevel(t),this._graphicStoreUpdate=!0,this.updateRequested=!1,this._pendingUpdate.updated.size>0){if(!this._processing)return void this._updateGraphics();this._needsProcessing=!0}}viewChange(){this.requestUpdate()}requestUpdate(){this.updateRequested||(this.updateRequested=!0,this.requestUpdateCallback())}processUpdate(o){this.updateRequested&&(this.updateRequested=!1,this.update(o))}graphicUpdateHandler(o){const{graphic:e,property:t}=o;switch(t){case"attributes":case"geometry":case"symbol":this._pendingUpdate.updated.add(e),this.requestUpdate();break;case"visible":this._setFilterState(e.uid,e.visible),this._attributeStore.sendUpdates()}}setHighlight(o){const e=o.map(t=>this._displayIds.get(t)).filter(F);this._attributeStore.setHighlight(o,e)}_getIntersectingTiles(o){const e=this._graphicStore.getBounds(o);if(!e||it(e)===0||rt(e)===0)return[];const t=Xt(e,this.view.spatialReference);return F(t)?[...new Set([...this.view.graphicsTileStore.boundsIntersections(t[0]),...this.view.graphicsTileStore.boundsIntersections(t[1])])]:this.view.graphicsTileStore.boundsIntersections(e)}async _updateTile(o){b(this._controller.signal);const e=o.tile,t=this._getGraphicsData(this._templateStore,e,o.addedOrModified),s=await this._processGraphics(e,t);return b(this._controller.signal),this._patchTile(e.key,{type:"update",addOrUpdate:s,remove:o.removed,end:!0,clear:!1,sort:!1}),s}_patchTile(o,e){const t=this._tiles.get(o);t&&(this.container.onTileData(t,e),this.container.requestRender())}_graphicsChangeHandler(o){const e=this._pendingUpdate;for(const t of o.added)e.added.add(t);for(const t of o.moved)e.updated.add(t);for(const t of o.removed)this._pendingUpdate.added.has(t)?e.added.delete(t):e.removed.add(t);this._processing?this._needsProcessing=!0:this._updateGraphics()}_getGraphicsToUpdate(){const o={added:[],removed:[],updated:[]};if(!this.graphics)return o;const e=this._pendingUpdate;for(const t of this.graphics.items)e.added.has(t)?o.added.push(t):e.updated.has(t)&&o.updated.push(t);for(const t of e.removed)this._graphicStore.has(t)&&o.removed.push(t);return e.added.clear(),e.removed.clear(),e.updated.clear(),o}async _updateGraphics(){this._processing=!0;const{added:o,removed:e,updated:t}=this._getGraphicsToUpdate(),s=this._tilesToUpdate;let i;try{if(!this._graphicStoreUpdate){const h=this.view.state,{resolution:l}=h;this._graphicStore.updateLevel(l)}const r=[],n=new Array(o.length+e.length);for(let h=0;h<t.length;h++){const l=t[h],u=this._getIntersectingTiles(l);for(const f of u)i=f.id,he(i,f,s).removed.push(this._displayIds.get(l.uid));r.push(this._updateGraphic(l,null)),n[h]=l}const a=t.length;for(let h=0;h<o.length;h++){const l=o[h];n[a+h]=l,this._graphicsSet.add(l),r.push(this._addGraphic(l))}for(const h of e){this._abortProcessingGraphic(h.uid);const l=this._getIntersectingTiles(h);for(const u of l)i=u.id,he(i,u,s).removed.push(this._displayIds.get(h.uid));this._graphicsSet.delete(h),this._graphicStore.remove(h)}let c;this._flipUpdatingGraphics(),await Promise.all(r);for(let h=0;h<n.length;h++){c=n[h];const l=this._getIntersectingTiles(c);for(const u of l)i=u.id,he(i,u,s).addedOrModified.push(c)}this._graphicStore.updateZ();const d=[];for(const[h,l]of s)d.push(this._updateTile(l));await Promise.all(d)}catch(r){Y(r)}for(const r of e)try{const n=await this._getSymbolForGraphic(r,null);if(n){const a=n.hash();this._hashToExpandedSymbol.delete(a)}}catch(n){Y(n)}s.clear(),this.notifyChange("updating"),this._processing=!1,this._needsProcessing&&(this._needsProcessing=!1,this._updateGraphics())}_getArcadeInfo(o){const e=(o.attributes?Object.keys(o.attributes):[]).map(t=>({name:t,alias:t,type:typeof o.attributes[t]=="string"?"esriFieldTypeString":"esriFieldTypeDouble"}));return A(o.geometry)?null:{geometryType:ue(o.geometry),spatialReference:nt.fromJSON(o.geometry.spatialReference),fields:e}}_getSymbolForGraphic(o,e){return b(this._controller.signal),F(o.symbol)?Promise.resolve(o.symbol):F(this.renderer)?this.renderer.getSymbolAsync(o,{scale:this.view.scale,signal:F(e)?e.signal:null}):Promise.resolve(this._getNullSymbol(o))}_getCIMSymbol(o,e,t){let s=this._hashToCIM.get(e);if(s)return Promise.resolve(s);const i=mt(o);if(F(i)){if(i.type==="CIMSymbolReference")return s=i,this._hashToCIM.set(e,s),Promise.resolve(s);let r=this._hashToCIMSymbolPromise.get(e);return r||(r=i.fetchCIMSymbol(t).then(n=>(this._hashToCIM.set(e,n.data),this._hashToCIMSymbolPromise.delete(e),n)).catch(n=>(this._hashToCIMSymbolPromise.delete(e),ge(n),null)),this._hashToCIMSymbolPromise.set(e,r),r)}return Promise.resolve(null)}_expandCIMSymbol(o,e,t,s){const i=this._hashToExpandedSymbol.get(t);if(i)return Promise.resolve(i);let r=this._hashToExpandedSymbolPromise.get(t);if(r)return r;const n=this.container.stage,a=this._getArcadeInfo(e),c=Ce(null),d=$t(o,c);return r=Mt(d,a,n.resourceManager,s),this._hashToExpandedSymbolPromise.set(t,r),r.then(h=>(this._hashToExpandedSymbol.set(t,h),this._hashToExpandedSymbolPromise.delete(t),h)),r}async _getSymbolResources(o,e){return b(this._controller.signal),this.container.stage?this._getSymbolForGraphic(o,e).then(t=>{if(!t)return null;const s=t.hash();return this._getCIMSymbol(t,s,e).then(i=>A(i)?null:this._expandCIMSymbol(i,o,s,e).then(r=>{const n=r.layers.filter(a=>a.type==="text"&&typeof a.text=="string");if(n&&n.length>0){const a=new Array(n.length);for(let d=0;d<n.length;d++){const h=n[d],l=[],[u]=yt(h.text);h.text=u;for(let f=0;f<u.length;f++)l.push(u.charCodeAt(f));a[d]={symbol:h,id:d,glyphIds:l}}const c=new Map;return this.container.getMaterialItems(a).then(d=>{ot(d);for(let h=0;h<n.length;h++){const l=n[h];c.set(l.cim,{text:l.text,mosaicItem:d[h].mosaicItem})}return{symbol:r,textInfo:c,hash:s}})}return{symbol:r,hash:s}}))}).catch(t=>(ge(t),null)):null}async _projectAndNormalizeGeometry(o,e){if(b(this._controller.signal),A(o.geometry)||o.geometry.type==="mesh")return null;let t=o.geometry;if(de(t)){const r=t.rings;t.rings=r}else if(xe(t)){const r=t.paths;t.paths=r}else if(_e(t)){const r=await this._getSymbolForGraphic(o,e);b(this._controller.signal),r&&(Wt(r.type)||Qt(r.type))?t=t.center:t=Jt(t)}await at(t.spatialReference,this.view.spatialReference);const s=gt(t),i=lt(s,t.spatialReference,this.view.spatialReference);return i&&ht(i),i}_onTileUpdate(o){const e=H(this.view.spatialReference);if(o.added&&o.added.length>0)for(const t of o.added)this._addNewTile(t,e);if(o.removed&&o.removed.length>0)for(const t of o.removed)this._removeTile(t.key)}async _addGraphic(o){this._abortProcessingGraphic(o.uid),b(this._controller.signal);const e=new AbortController;this._graphicIdToAbortController.set(o.uid,e);const t={signal:e.signal};try{await this._addOrUpdateGraphic(o,t),b(this._controller.signal),this._graphicIdToAbortController.delete(o.uid)}catch(s){if(this._graphicIdToAbortController.delete(o.uid),!Y(s))throw s}}_updateGraphic(o,e){b(this._controller.signal);const t=this._projectAndNormalizeGeometry(o,e),s=this._getSymbolResources(o,e);return Promise.all([t,s]).then(([i,r])=>{b(this._controller.signal),this._graphicStore.addOrModify(o,r,i)})}_addOrUpdateGraphic(o,e){b(this._controller.signal);const t=this._projectAndNormalizeGeometry(o,e),s=this._getSymbolResources(o,e);return Promise.all([t,s]).then(([i,r])=>{b(this._controller.signal),this._graphicsSet.has(o)&&this._graphicStore.addOrModify(o,r,i)})}_addTile(o){const e=this.view.featuresTilingScheme.getTileBounds(w(),o),t=this.view.featuresTilingScheme.getTileResolution(o.level),s=new kt(o,t,e[0],e[3]);return this._tiles.set(o,s),this.container.addChild(s),s}async _addNewTile(o,e){const t=this._addTile(o.key),s=this._graphicStore.queryTileData(this._templateStore,o);if(s.length===0)return;if(e){const r=Math.round((e.valid[1]-e.valid[0])/o.resolution);for(const n of s)n.geometry&&(ve(n.geometry)||oe(n.geometry))&&this._wrapPoints(n,r)}const i=o.key;this._tileUpdateSet.add(o.key),this.notifyChange("updating");try{const r={type:"update",clear:!1,addOrUpdate:await this._processGraphics(o,s),remove:[],end:!0,sort:!1};t.patch(r),this._tileUpdateSet.delete(i),this.notifyChange("updating")}catch(r){if(this._tileUpdateSet.delete(i),this.notifyChange("updating"),!Y(r))throw r}}_removeTile(o){if(!this._tiles.has(o))return;const e=this._tiles.get(o);this.container.removeChild(e),e.destroy(),this._tiles.delete(o)}_setFilterState(o,e){const t=this._displayIds.get(o),s=this._attributeStore.getHighlightFlag(o);this._attributeStore.setData(t,0,0,s|(e?xt:0))}_getGraphicsData(o,e,t){const s=this.view,i=H(s.spatialReference),r=this._graphicStore.getGraphicsData(o,e,t);if(i){const n=Math.round((i.valid[1]-i.valid[0])/e.resolution);for(const a of r)a.geometry&&(ve(a.geometry)||oe(a.geometry))&&this._wrapPoints(a,n)}return r}_wrapPoints(o,e){const t=o.geometry;oe(t)?this._wrapMultipoint(t,e):this._wrapPoint(o,e)}_wrapMultipoint(o,e){const t=o.points,s=[];let i=0,r=0;for(const[n,a]of t){if(s.push([n+i,a]),i=0,e===L){const c=5*R;n+r<c?(s.push([e,0]),i=-e):n+r>L-c&&(s.push([-e,0]),i=e)}else n+r<-R?(s.push([e,0]),i=-e):n+r>L+R&&(s.push([-e,0]),i=e);r+=n}o.points=s}_wrapPoint(o,e){const t=o.geometry;if(e===L){const s=5*R;t.x<s?o.geometry={points:[[t.x,t.y],[e,0]]}:t.x>L-s&&(o.geometry={points:[[t.x,t.y],[-e,0]]})}else t.x<-R?o.geometry={points:[[t.x,t.y],[e,0]]}:t.x>L+R&&(o.geometry={points:[[t.x,t.y],[-e,0]]})}_processGraphics(o,e,t){if(!(e&&e.length)||!this._meshFactory)return Promise.resolve(null);const s=ie.from(e,this.uid,o.transform),i=this._meshFactory;return this._matcher.then(r=>i.analyzeGraphics(s,this.container.stage.resourceManager,r,null,null,t).then(()=>(this._attributeStore.sendUpdates(),this._processAnalyzedGraphics(o,s))))}_processAnalyzedGraphics(o,e){const t=this._meshFactory,s=e.getSize(),i=e.getCursor(),r={features:s,records:s,metrics:0},n=new Lt(o.key.id,r,Ae.DEFAULT,!1,!1),a=[];for(;i.next();){const l=i.readGraphic();l.insertAfter=l.insertAfter===-1?-1:this._displayIds.get(l.insertAfter),l.displayId=this._displayIds.get(l.attributes[this.uid]);const u=new O(l.displayId);u.insertAfter=l.insertAfter,a.push(u),t.writeGraphic(n,i,o.level,this.container.stage.resourceManager)}const c=o.tileInfoView.tileInfo.isWrappable,d=n.serialize(c);if(d.length!==1)return new B;const h=d[0].message;return B.fromVertexData(h,a)}_abortProcessingGraphic(o){var e;(e=this._graphicIdToAbortController.get(o))==null||e.abort()}_getNullSymbol(o){const e=o.geometry;return xe(e)?dt:de(e)||_e(e)?ct:this.defaultPointSymbolEnabled?ut:null}_flipUpdatingGraphics(){this._updatingGraphicsTimer&&clearTimeout(this._updatingGraphicsTimer),this._updatingGraphicsTimer=setTimeout(()=>{this._updatingGraphicsTimer=null,this.notifyChange("updating")},160),this.notifyChange("updating")}};D([C({constructOnly:!0})],T.prototype,"requestUpdateCallback",void 0),D([C()],T.prototype,"container",void 0),D([C({constructOnly:!0})],T.prototype,"graphics",void 0),D([C()],T.prototype,"updating",null),D([C()],T.prototype,"view",void 0),D([C()],T.prototype,"updateRequested",void 0),D([C()],T.prototype,"defaultPointSymbolEnabled",void 0),T=D([ze("esri.views.2d.layers.support.GraphicsView2D")],T);const vs=T;export{vs as a};
