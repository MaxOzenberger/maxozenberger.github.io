import{bp as w,nW as b,o1 as V,z as P,n$ as q}from"./index.3255d2a5.js";import{s as D,d as x}from"./cimAnalyzer.2e975d1d.js";import{GeometryStyle as G,CIMSymbolRasterizer as E}from"./CIMSymbolRasterizer.e19db8d8.js";import"./fontUtils.a84c0faf.js";import"./BidiEngine.f5b8c89f.js";import"./GeometryUtils.6fd53e6d.js";import"./enums.9a5c29c3.js";import"./alignmentUtils.ba8835fe.js";import"./definitions.1d569ae6.js";import"./number.dcd3e86c.js";import"./Rect.e8e4d18d.js";import"./callExpressionWithFeature.565c4416.js";import"./floatRGBA.7b501bd7.js";import"./CIMResourceManager.06b6abfa.js";import"./Rasterizer.f4189955.js";import"./_commonjsHelpers.4421ccc9.js";import"./rasterizingUtils.35b0a2ca.js";import"./imageutils.2b310abc.js";const g=new E(null,!0),m=w(b.size),F=w(b.maxSize),L=w(b.lineWidth),W=1;function k(e){const t=e==null?void 0:e.size;return typeof t=="number"?{width:t,height:t}:{width:t!=null&&typeof t=="object"&&"width"in t?t.width:null,height:t!=null&&typeof t=="object"&&"height"in t?t.height:null}}async function rt(e,t={}){var I;const{node:M,opacity:v,symbolConfig:h}=t,j=typeof h=="object"&&"isSquareFill"in h&&h.isSquareFill,S=t.cimOptions||t,o=S.geometryType||V((I=e==null?void 0:e.data)==null?void 0:I.symbol),i=k(t),{feature:z,fieldMap:C}=S;if(i.width==null||i.height==null){const r=await D.resolveSymbolOverrides(e.data,z,null,C,o);if(!r)return null;(e=e.clone()).data={type:"CIMSymbolReference",symbol:r},e.data.primitiveOverrides=void 0;const y=[];x.fetchResources(r,g.resourceManager,y),y.length>0&&await Promise.all(y);const n=x.getEnvelope(r,null,g.resourceManager),d=n==null?void 0:n.width,f=n==null?void 0:n.height;i.width=o==="esriGeometryPolygon"?m:o==="esriGeometryPolyline"?L:d!=null&&isFinite(d)?Math.min(d,F):m,i.height=o==="esriGeometryPolygon"?m:f!=null&&isFinite(f)?Math.max(Math.min(f,F),W):m}const p=await g.rasterizeCIMSymbolAsync(e,z,i,j||o!=="esriGeometryPolygon"?G.Preview:G.Legend,C,o);if(!p)return null;const{width:O,height:R}=p,l=document.createElement("canvas");l.width=O,l.height=R,l.getContext("2d").putImageData(p,0,0);const c=P(i.width),u=P(i.height),s=new Image(c,u);s.src=l.toDataURL(),v!=null&&(s.style.opacity=`${v}`);let a=s;if(t.effectView!=null){const r={shape:{type:"image",x:0,y:0,width:c,height:u,src:s.src},fill:null,stroke:null,offset:[0,0]};a=q([[r]],[c,u],{effectView:t.effectView})}return M&&a&&M.appendChild(a),a}export{rt as previewCIMSymbol};
