import{a5 as p,a6 as m,a7 as f,J as l,g as y,fy as v,da as _,t as u,a as d}from"./index.3255d2a5.js";import g from"./FeatureLayerView2D.bbaa0084.js";import{e as S}from"./util.c874f147.js";import"./EffectView.ab0cb7da.js";import"./definitions.1d569ae6.js";import"./LayerView2D.faad288b.js";import"./Container.f0dd2697.js";import"./enums.3c1fa5b5.js";import"./Texture.d66dc1cb.js";import"./schemaUtils.1fd0b466.js";import"./color.18cd4954.js";import"./enums.9a5c29c3.js";import"./VertexElementDescriptor.5da9dfe9.js";import"./number.dcd3e86c.js";import"./utils.e5643e7e.js";import"./MaterialKey.3d16bafa.js";import"./alignmentUtils.ba8835fe.js";import"./visualVariablesUtils.fc657d78.js";import"./createSymbolSchema.0873edf1.js";import"./cimAnalyzer.2e975d1d.js";import"./fontUtils.a84c0faf.js";import"./BidiEngine.f5b8c89f.js";import"./GeometryUtils.6fd53e6d.js";import"./Rect.e8e4d18d.js";import"./callExpressionWithFeature.565c4416.js";import"./floatRGBA.7b501bd7.js";import"./ExpandedCIM.31fce9f6.js";import"./floorFilterUtils.4de71259.js";import"./popupUtils.46d32bd9.js";import"./LayerView.cc5af741.js";import"./RefreshableLayerView.d7e6fba9.js";function h(e,t){if(u(e)&&u(t))return null;const r={};return d(t)&&(r.geometry=t.toJSON()),d(e)&&(r.where=e),r}let o=class extends g{constructor(){super(...arguments),this._enabledEventTypes=new Set,this._isUserPaused=!1,this.errorString=null,this.connectionStatus="disconnected"}initialize(){this.addHandles([l(()=>this.layer.customParameters,e=>this._proxy.updateCustomParameters(e)),this.layer.on("send-message-to-socket",e=>this._proxy.sendMessageToSocket(e)),this.layer.on("send-message-to-client",e=>this._proxy.sendMessageToClient(e)),l(()=>this.layer.purgeOptions,()=>this._update()),l(()=>this.suspended,e=>{e?this._proxy.pauseStream():this._isUserPaused||this._proxy.resumeStream()})],"constructor")}get connectionError(){if(this.errorString)return new y("stream-controller",this.errorString)}pause(){this._isUserPaused=!0,this._proxy.pauseStream()}resume(){this._isUserPaused=!1,this._proxy.resumeStream()}on(e,t){if(Array.isArray(e))return v(e.map(n=>this.on(n,t)));const r=["data-received","message-received"].includes(e);r&&(this._enabledEventTypes.add(e),this._proxy.enableEvent(e,!0));const i=super.on(e,t),s=this;return{remove(){i.remove(),r&&(s._proxy.closed||s.hasEventListener(e)||s._proxy.enableEvent(e,!1))}}}queryLatestObservations(e,t){var r,i,s;if(!(((r=this.layer.timeInfo)==null?void 0:r.endField)||((i=this.layer.timeInfo)==null?void 0:i.startField)||((s=this.layer.timeInfo)==null?void 0:s.trackIdField)))throw new y("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");return this._proxy.queryLatestObservations(this._cleanUpQuery(e),t).then(n=>{const a=_.fromJSON(n);return a.features.forEach(c=>{c.layer=this.layer,c.sourceLayer=this.layer}),a})}detach(){super.detach(),this.connectionStatus="disconnected"}_createClientOptions(){return{...super._createClientOptions(),setProperty:e=>{this.set(e.propertyName,e.value)}}}_createTileRendererHash(e){const t=`${JSON.stringify(this.layer.purgeOptions)}.${JSON.stringify(h(this.layer.definitionExpression,this.layer.geometryDefinition))})`;return super._createTileRendererHash(e)+t}async _createServiceOptions(){const e=this.layer,{objectIdField:t}=e,r=e.fields.map(a=>a.toJSON()),i=S(e.geometryType),s=e.timeInfo&&e.timeInfo.toJSON()||null,n=e.spatialReference?e.spatialReference.toJSON():null;return{type:"stream",fields:r,geometryType:i,objectIdField:t,timeInfo:s,source:this.layer.parsedUrl,serviceFilter:h(this.layer.definitionExpression,this.layer.geometryDefinition),purgeOptions:this.layer.purgeOptions.toJSON(),enabledEventTypes:Array.from(this._enabledEventTypes.values()),spatialReference:n,maxReconnectionAttempts:this.layer.maxReconnectionAttempts,maxReconnectionInterval:this.layer.maxReconnectionInterval,updateInterval:this.layer.updateInterval,customParameters:e.customParameters}}};p([m()],o.prototype,"errorString",void 0),p([m({readOnly:!0})],o.prototype,"connectionError",null),p([m()],o.prototype,"connectionStatus",void 0),o=p([f("esri.views.2d.layers.StreamLayerView2D")],o);const Y=o;export{Y as default};
