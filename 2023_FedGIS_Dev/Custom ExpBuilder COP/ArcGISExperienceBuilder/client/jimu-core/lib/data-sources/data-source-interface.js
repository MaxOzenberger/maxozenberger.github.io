/**
 * All data source status is here, including data source instance status and data status (for QueriableDataSource).
 * * Instance status includes: NotCreated, Created, CreateError. <br/>
 *    When a data source is requested to be created, it is set to `NotCreated` at first.
 *    If a data source has never been used, there is no data source status.
 * * Data status includes: NotReady, Unloaded, Loading, Loaded, LoadError. <br/>
 *    When a QueriableDataSource is created, it is set as `NotReady` or `Unloaded` at first.
 *    If the data source is generated by widgets, the initial status will be `NotReady`, otherwise the initial status will be `Unloaded`.
 *    When widgets are ready to generate data, that is to say, the data source is ready to do query, widgets will change the status from `NotReady` to `Unloaded`.
 *    When widgets are not ready to generate data, widgets will change the status back to `NotReady`,
 *    then framework will help to clear source records, records and cache in data source instance.
 *    If `load()` is invoked, it will be set as `Loading`. If data is returned, it will be set as `Loaded`.
 *    If an error occurs, it will be set as `LoadError`.
 */
export var DataSourceStatus;
(function (DataSourceStatus) {
    // Instance status.
    DataSourceStatus["NotCreated"] = "NOT_CREATED";
    DataSourceStatus["Created"] = "CREATED";
    DataSourceStatus["CreateError"] = "CREATE_ERROR";
    // Data status.
    /**
     * NotReady is for widget output data source only.
     * When output data source instance is created, the data is not ready for use.
     * Widget should dispatch an action (DataSourceStatusChanged) to make the data source ready for use.
     * If a data source status is not ready, the query should return an empty result.
     */
    DataSourceStatus["NotReady"] = "NOT_READY";
    DataSourceStatus["Unloaded"] = "UNLOADED";
    DataSourceStatus["Loading"] = "LOADING";
    DataSourceStatus["Loaded"] = "LOADED";
    DataSourceStatus["LoadError"] = "LOAD_ERROR";
    // Save status.
    /** @ignore */
    DataSourceStatus["Saving"] = "SAVING";
    /** @ignore */
    DataSourceStatus["Saved"] = "SAVED";
    /** @ignore */
    DataSourceStatus["SaveError"] = "SAVE_ERROR";
    // For remote push(stream) data sources.
    /** @ignore */
    DataSourceStatus["Closed"] = "CLOSED";
    /** @ignore */
    DataSourceStatus["Connecting"] = "CONNECTING";
    /** @ignore */
    DataSourceStatus["Connected"] = "CONNECTED";
    /** @ignore */
    DataSourceStatus["Closing"] = "CLOSING";
    // For client DS, we don't define status.
})(DataSourceStatus || (DataSourceStatus = {}));
/**
 * The data source types that `jimu-core` supports.
 */
export var DataSourceTypes;
(function (DataSourceTypes) {
    /** @ignore */
    DataSourceTypes["SimpleLocal"] = "SIMPLE_LOCAL";
    /** @ignore */
    DataSourceTypes["CSV"] = "CSV";
    /**
     * FeatureLayer data source is a `QueriableDataSource`, which is used to query ArcGIS feature service.
     * See {@link FeatureLayerDataSource}
     */
    DataSourceTypes["FeatureLayer"] = "FEATURE_LAYER";
    /**
     * See {@link SceneLayerDataSource}
     */
    DataSourceTypes["SceneLayer"] = "SCENE_LAYER";
    /**
     * GroupLayer data source is a data source set that may have child data sources. It is from group layer in a map service or a webmap/webscene.
     */
    DataSourceTypes["GroupLayer"] = "GROUP_LAYER";
    /**
     * FeatureService data source is a data source set that may have child data sources. It is from the feature service.
     */
    DataSourceTypes["FeatureService"] = "FEATURE_SERVICE";
    /**
     * MapService data source is a data source set that may have child data sources. It is from the map service.
     */
    DataSourceTypes["MapService"] = "MAP_SERVICE";
    /**
     * SceneService data source is a data source set that may have child data sources. It is from the scene service.
     */
    DataSourceTypes["SceneService"] = "SCENE_SERVICE";
})(DataSourceTypes || (DataSourceTypes = {}));
/**
 * @ignore
 */
export var ArcGISDataSourceTypes;
(function (ArcGISDataSourceTypes) {
    ArcGISDataSourceTypes["Map"] = "MAP";
    ArcGISDataSourceTypes["WebMap"] = "WEB_MAP";
    ArcGISDataSourceTypes["WebScene"] = "WEB_SCENE";
})(ArcGISDataSourceTypes || (ArcGISDataSourceTypes = {}));
/**
 * @ignore
 * All data source types, including types from jimu-core and jimu-arcgis.
 * The variable is only used as `value`, e.g. const types = [AllDataSourceTypes.WebMap].
 */
export const AllDataSourceTypes = Object.assign(Object.assign({}, DataSourceTypes), ArcGISDataSourceTypes);
/**
 * For now, we only support some layer service types.
 */
export var SupportedLayerServiceTypes;
(function (SupportedLayerServiceTypes) {
    // single layer service under map service or feature service
    SupportedLayerServiceTypes["FeatureLayer"] = "Feature Layer";
    SupportedLayerServiceTypes["Table"] = "Table";
    SupportedLayerServiceTypes["GroupLayer"] = "Group Layer";
    // single layer service under scene service
    SupportedLayerServiceTypes["SceneLayerPoint"] = "Point";
    SupportedLayerServiceTypes["SceneLayer3DObject"] = "3DObject";
})(SupportedLayerServiceTypes || (SupportedLayerServiceTypes = {}));
/**
 * For now, we only support some service types.
 */
export var SupportedServiceTypes;
(function (SupportedServiceTypes) {
    // [Feature Service](https://developers.arcgis.com/rest/services-reference/feature-service.htm)
    SupportedServiceTypes["FeatureService"] = "FeatureServer";
    // [Map Service](https://developers.arcgis.com/rest/services-reference/hosted-map-service.htm)
    SupportedServiceTypes["MapService"] = "MapServer";
    // [Scene Service](https://developers.arcgis.com/rest/services-reference/scene-service.htm)
    SupportedServiceTypes["SceneService"] = "SceneServer";
})(SupportedServiceTypes || (SupportedServiceTypes = {}));
/**
 * For now, we only support some portal item types.
 * Please see [Items and item types](https://developers.arcgis.com/rest/users-groups-and-items/items-and-item-types.htm).
 */
export var SupportedItemTypes;
(function (SupportedItemTypes) {
    SupportedItemTypes["WebMap"] = "Web Map";
    SupportedItemTypes["WebScene"] = "Web Scene";
    SupportedItemTypes["FeatureService"] = "Feature Service";
    SupportedItemTypes["MapService"] = "Map Service";
    SupportedItemTypes["SceneService"] = "Scene Service";
    SupportedItemTypes["FeatureCollection"] = "Feature Collection";
    SupportedItemTypes["GeometryService"] = "Geometry Service";
    SupportedItemTypes["GeocodingService"] = "Geocoding Service";
    SupportedItemTypes["GeoprocessingService"] = "Geoprocessing Service";
    SupportedItemTypes["NetworkAnalysisService"] = "Network Analysis Service";
    SupportedItemTypes["GeoenrichmentService"] = "Geoenrichment service";
})(SupportedItemTypes || (SupportedItemTypes = {}));
/**
 * For now, we only support some layer types.
 * Please see [Layer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html).
 */
export var SupportedLayerTypes;
(function (SupportedLayerTypes) {
    SupportedLayerTypes["FeatureLayer"] = "feature";
    SupportedLayerTypes["MapImageLayer"] = "map-image";
    SupportedLayerTypes["TileLayer"] = "tile";
    SupportedLayerTypes["GroupLayer"] = "group";
    SupportedLayerTypes["SceneLayer"] = "scene";
})(SupportedLayerTypes || (SupportedLayerTypes = {}));
/**
 * @ignore
 */
export class DataSourceError extends Error {
    constructor(id, message) {
        super(message);
        this.dataSourceId = id;
    }
}
/**
 * Query scope defines which data is returned when the query is executed in addition to the query parameters.
 */
export var QueryScope;
(function (QueryScope) {
    /** Use the query parameters directly to query. */
    QueryScope["InAllData"] = "IN_ALL_DATA";
    /** Use the query parameters and the filters configured in exb to query. */
    QueryScope["InRemoteConfigView"] = "IN_REMOTE_CONFIG_VIEW";
    /** Use the query parameters and the configured filters in data source and filters configured in exb to query. */
    QueryScope["InConfigView"] = "IN_CONFIG_VIEW";
    /** Use all of the appliyed query parameters to query. */
    QueryScope["InRuntimeView"] = "IN_RUNTIME_VIEW";
})(QueryScope || (QueryScope = {}));
// #endregion Item mixin
//# sourceMappingURL=data-source-interface.js.map